function! s:set_first_line(str)
    call setline(1, a:str)
endfunction

Describe 'github_complete#repo'
    Describe #find_start()
        It returns the column to start completion
            call s:set_first_line(' aaa foo/bar')
            normal! gg$
            Assert Equals(github_complete#repo#find_start(' aaa foo/bar'), 5)

            call s:set_first_line(' aa f-o/bar baz')
            normal! gg$Tr
            Assert Equals(github_complete#repo#find_start(' aa foo/bar baz'), 4)

            call s:set_first_line(' a _oo/bar)')
            normal! gg$
            Assert Equals(github_complete#repo#find_start(' a foo/bar)'), 3)
        End

        It returns -1 when the column to start completion is not found
            call s:set_first_line(' a oo')
            normal! gg$
            Assert Equals(github_complete#repo#find_start(' a oo'), -1)

            call s:set_first_line(' a/')
            normal! gg$
            Assert Equals(github_complete#repo#find_start(' a/'), -1)

            call s:set_first_line(' /a')
            normal! gg$
            Assert Equals(github_complete#repo#find_start(' /a'), -1)

            call s:set_first_line(' a.b/c.d')
            normal! gg$
            Assert Equals(github_complete#repo#find_start(' a.b/c.d'), -1)
        End
    End

    Describe #candidates()
        It searches the specific user's repositories
            let cs = github_complete#repo#candidates('rhysd/cle')
            Assert IsList(cs)
            Assert True(!empty(cs))
            Assert True(cs[0].word =~# '^rhysd/cle')
        End

        It caches previous candidates
            call github_complete#api#reset_cache()
            Assert True(empty(github_complete#api#get_cache()))

            let cs = github_complete#repo#candidates('rhysd/cle')

            Assert True(github_complete#api#is_cached('search/repositories', 'q=cle+in:name+user:rhysd'))
            Assert Equals(cs, github_complete#repo#candidates('rhysd/cle'))
        End
    End
End
